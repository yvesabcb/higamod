/*
	Matteo Aletti
	teo.aletti@gmail.com
*/

// Creating a mesh on [0,6]X[0,1]
int N=100;
	border aa(t=0,1) {x=6*t; y=0; label=1;}
	border bb(t=0,1) {x=6; y=t; label=2;}
	border cc(t=0,1) {x=6-6*t; y=1; label=3;}
	border dd(t=0,1) {x=0; y=1-t; label=4;}
mesh Th=buildmesh( aa(6*N) + bb(N) + cc(6*N) + dd(N) );

real mu,beta1,beta2,sigma,chi,datoup,datodown;
	
	mu=1.;
	beta1=20.;
	beta2=0.;
	sigma=0.;
	chi=3.;

	datoup=chi*0.06;
	datodown=chi*0.05;

real A,C,b;

	b=0.01; 
    C=(datodown+mu*b)/chi;
    cout<<C<<endl;
    A=(datoup-mu*b-b-(datodown-mu*b)/chi )/(2.*mu+chi);
    cout<<A<<endl;
func uin = A*y*y + b*y + C + 0.*x;
func force = 10.*(((x-1.5)*(x-1.5)+0.4*(y-0.25)*(y-0.25)<0.01)+((x-1.5)*(x-1.5)+0.4*(y-0.75)*(y-0.75)<0.01));

fespace Vh(Th,P2);
Vh u,v;

problem RobinRobin(u,v)=

		int2d(Th)     ( mu*( dx(u)*dx(v) + dy(u)*dy(v) ) )  // Laplacian operator
		+ int2d(Th)   ( beta1*dx(u)*v )						// Advection in x direction
		+ int2d(Th)   ( beta2*dy(u)*v )						// Advection in y direction
		+ int2d(Th)   ( sigma*u*v     )						// Reaction
		+ int1d(Th,1) ( chi*u*v       )						// Robin Functional
		- int1d(Th,1) ( datodown*v    )						// Force due to Robin down
		+ int1d(Th,3) ( chi*u*v       )						// Robin Functional
		- int1d(Th,3) ( datoup*v    )						// Force due to Robin up
        - int2d(Th)   ( force*v       )						// Force term
		+ on(4,u=uin);										// Dirichlet Inflow
		
real h=1./N;
cout<<"h= "<<h<<endl;
RobinRobin;
real[int] meshx(3*6*N);
for (int i=0;i<6*N;i++)
{	
	meshx[3*i]=i*h;
	meshx[3*i+1]=i*h+h/2.;
	meshx[3*i+2]=i*h+h;
}

/*
{
	ofstream file("DR_monodom_FF.mtv");
	int i, j;
	// INTESTAZIONE PLOTMTV
	file << "$ DATA=CONTCURVE " << endl;
	file << "% contstyle=3" << endl;
	//file << "% toplabel= \"FreeFem\" " << endl;
	//file << "% xlabel= \"x\" " << endl;
	//file << "% ylabel= \"y\" " << endl;
	//file << "% zlabel= \"y\" " << endl;
	file << "% axisguides=false" << endl;
	file << "% contfill=true"<<endl;
	// MESH E SOLUZIONE
	for (i=0;i<Th.nt;i++)
	{
	 	for (j=0;j<3;j++)
			{
				file << Th[i][j].x << " " << Th[i][j].y << " " << u(Th[i][j].x,Th[i][j].y) << endl;
			}
		file << endl;
	}
	file << "$ END" << endl;
}
*/
{
	ofstream file("RRFF.out");
	file.scientific;
	file.precision(7);
	int i, j;
    int M=60;
    int NN=6*N*3;
	file <<"            "<<NN<<endl;
	file <<"             "<<M<<endl;
	for ( int k=1;k<=N*6;k++)
    {
        for (int j=1;j<=M;j++)
            file<<"       "<<meshx[ (k-1)*3 + 0]<<"       "<<(j-1.)/(M-1.)<<"       "<<u(meshx[ (k-1)*3 + 0],(j-1.)/(M-1.))<<endl;
        for (int j=1;j<=M;j++)
            file<<"       "<<meshx[ (k-1)*3 + 1]<<"       "<<(j-1.)/(M-1.)<<"       "<<u(meshx[ (k-1)*3 + 1],(j-1.)/(M-1.))<<endl;
        for (int j=1;j<=M;j++)
            file<<"       "<<meshx[ (k-1)*3 + 2]<<"       "<<(j-1.)/(M-1.)<<"       "<<u(meshx[ (k-1)*3 + 2],(j-1.)/(M-1.))<<endl;
    }
}
plot(u,fill=false,wait=1);
